<#
// TODO: ADD TO THE PROJECT a new text file "Registrations.ttinclude" with the contents of this file
//
// "*.ttinclude" is a T4 Text Template include file.
// Given you have ReSharper with ForTea extension installed,
// you will get intellisense and most of the refactorings working.
//
// TODO: Next
// 1. Fill-in the methods below with your registrations and resolution roots.
// 2. Re-save the "Container.Generated.tt" file. Confirm the Visual Studio prompt if any.
// 3. Check the "Container.Generated.cs" for the resolution errors.
//
#>
<#@ assembly Name="System.Core" #>
<#@ assembly Name="$(DryIocAssembly)" #>
<#@ import Namespace="DryIoc" #>
<#@ import Namespace="ImTools" #>
<#@ assembly Name="$(SolutionDir)IocPerformance\bin\Release\IocPerformance.exe" #>
<#@ import Namespace="IocPerformance.Classes.Complex" #>
<#@ import Namespace="IocPerformance.Classes.Conditions" #>
<#@ import Namespace="IocPerformance.Classes.Dummy" #>
<#@ import Namespace="IocPerformance.Classes.Multiple" #>
<#@ import Namespace="IocPerformance.Classes.Properties" #>
<#@ import Namespace="IocPerformance.Classes.Generics" #>
<#@ import Namespace="IocPerformance.Classes.Standard" #><#+

IContainer GetContainerWithRegistrations()
{
    var container = new Container();

    RegisterDummies(container);
    RegisterStandard(container);
    RegisterComplex(container);
    RegisterPropertyInjection(container);
    RegisterConditional(container);
    RegisterMultiple(container);
    RegisterOpenGeneric(container);

    return container;
}

private void RegisterDummies(Container c)
{
    c.Register<IDummyOne, DummyOne>();
    c.Register<IDummyTwo, DummyTwo>();
    c.Register<IDummyThree, DummyThree>();
    c.Register<IDummyFour, DummyFour>();
    c.Register<IDummyFive, DummyFive>();
    c.Register<IDummySix, DummySix>();
    c.Register<IDummySeven, DummySeven>();
    c.Register<IDummyEight, DummyEight>();
    c.Register<IDummyNine, DummyNine>();
    c.Register<IDummyTen, DummyTen>();
}

private void RegisterStandard(Container c)
{
    c.Register<ISingleton1, Singleton1>(Reuse.Singleton);
    c.Register<ISingleton2, Singleton2>(Reuse.Singleton);
    c.Register<ISingleton3, Singleton3>(Reuse.Singleton);
    c.Register<ITransient1, Transient1>();
    c.Register<ITransient2, Transient2>();
    c.Register<ITransient3, Transient3>();
    c.Register<ICombined1, Combined1>();
    c.Register<ICombined2, Combined2>();
    c.Register<ICombined3, Combined3>();
    c.Register<ICalculator1, Calculator1>();
    c.Register<ICalculator2, Calculator2>();
    c.Register<ICalculator3, Calculator3>();
}

private void RegisterComplex(Container c)
{
    c.Register<ISubObjectOne, SubObjectOne>();
    c.Register<ISubObjectTwo, SubObjectTwo>();
    c.Register<ISubObjectThree, SubObjectThree>();
    c.Register<IFirstService, FirstService>(Reuse.Singleton);
    c.Register<ISecondService, SecondService>(Reuse.Singleton);
    c.Register<IThirdService, ThirdService>(Reuse.Singleton);
    c.Register<IComplex1, Complex1>();
    c.Register<IComplex2, Complex2>();
    c.Register<IComplex3, Complex3>();
}

private void RegisterPropertyInjection(Container c)
{
    c.Register<IServiceA, ServiceA>(Reuse.Singleton);
    c.Register<IServiceB, ServiceB>(Reuse.Singleton);
    c.Register<IServiceC, ServiceC>(Reuse.Singleton);

    c.Register<ISubObjectA, SubObjectA>(made: PropertiesAndFields.Auto);
    c.Register<ISubObjectB, SubObjectB>(made: PropertiesAndFields.Auto);
    c.Register<ISubObjectC, SubObjectC>(made: PropertiesAndFields.Auto);

    c.Register<IComplexPropertyObject1, ComplexPropertyObject1>(made: PropertiesAndFields.Auto);
    c.Register<IComplexPropertyObject2, ComplexPropertyObject2>(made: PropertiesAndFields.Auto);
    c.Register<IComplexPropertyObject3, ComplexPropertyObject3>(made: PropertiesAndFields.Auto);
}

private void RegisterOpenGeneric(Container c)
{
    c.Register(typeof(IGenericInterface<>), typeof(GenericExport<>));
    c.Register(typeof(ImportGeneric<>), typeof(ImportGeneric<>));
}

private void RegisterConditional(Container c)
{
    c.Register<ImportConditionObject1>();
    c.Register<ImportConditionObject2>();
    c.Register<ImportConditionObject3>();

    c.Register<IExportConditionInterface, ExportConditionalObject1>(
        setup: Setup.With(condition: r => r.Parent.ImplementationType == typeof(ImportConditionObject1)));

    c.Register<IExportConditionInterface, ExportConditionalObject2>(
        setup: Setup.With(condition: r => r.Parent.ImplementationType == typeof(ImportConditionObject2)));

    c.Register<IExportConditionInterface, ExportConditionalObject3>(
        setup: Setup.With(condition: r => r.Parent.ImplementationType == typeof(ImportConditionObject3)));
}

private void RegisterMultiple(Container c)
{
    c.Register<ImportMultiple1>();
    c.Register<ImportMultiple2>();
    c.Register<ImportMultiple3>();
    c.Register<ISimpleAdapter, SimpleAdapterOne>();
    c.Register<ISimpleAdapter, SimpleAdapterTwo>();
    c.Register<ISimpleAdapter, SimpleAdapterThree>();
    c.Register<ISimpleAdapter, SimpleAdapterFour>();
    c.Register<ISimpleAdapter, SimpleAdapterFive>();
}

public static readonly Type[] Roots =
{
    typeof(IComplex1),
    typeof(IComplex2),
    typeof(IComplex3),
    typeof(IDummyOne),
    typeof(ImportMultiple1),
    typeof(ImportMultiple2),
    typeof(ImportMultiple3),
    typeof(IComplexPropertyObject1),
    typeof(IComplexPropertyObject2),
    typeof(IComplexPropertyObject3),
    typeof(ICombined1),
    typeof(ICombined2),
    typeof(ICombined3),
    typeof(ISingleton1),
    typeof(ISingleton2),
    typeof(ISingleton3),
    typeof(ITransient1),
    typeof(ITransient2),
    typeof(ITransient3),
    typeof(ImportConditionObject1),
    typeof(ImportConditionObject2),
    typeof(ImportConditionObject3)
};

// TODO: For each passed registration specify what resolution roots it provides, null if none
ServiceInfo[] SpecifyResolutionRoots(ServiceRegistrationInfo reg)
{
    return
        reg.ServiceType == typeof(ImportGeneric<>) 
            ? new [] { 
                typeof(ImportGeneric<int>), 
                typeof(ImportGeneric<float>),
                typeof(ImportGeneric<object>)
            }.Map(x => ServiceInfo.Of(x, serviceKey: reg.OptionalServiceKey)) :
        Roots.IndexOf(reg.ServiceType) != -1 ? reg.ToServiceInfo().One() : null;
}

// TODO: Additional roots to generate ...
ServiceInfo[] CustomResolutionRoots = { };
#>